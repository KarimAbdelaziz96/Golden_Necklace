def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw  GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.goldennecklace.player"
        minSdkVersion 25
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled = true
    }



    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
//            debuggable true
//            shrinkResources false
//            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }

}

flutter {
    source '../..'
}
configurations.all {
    resolutionStrategy {
        force 'com.google.protobuf:protobuf-javalite:3.22.3'
        eachDependency { details ->
            if (details.requested.group == 'com.google.protobuf' && details.requested.name == 'protobuf-lite') {
                details.useTarget 'com.google.protobuf:protobuf-javalite:3.22.3'
            }
        }
    }
}
dependencies {
     implementation('com.google.android.gms:play-services-cast-framework:19.0.0') {
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }
    implementation('com.google.android.exoplayer:extension-cast:2.14.2') {
        exclude group: 'com.google.protobuf', module: 'protobuf-lite'
    }
    implementation 'com.google.android.gms:play-services-cast-framework:19.0.0'
    implementation 'com.google.android.exoplayer:extension-cast:2.14.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("com.android.support:multidex:1.0.3")
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    

}
